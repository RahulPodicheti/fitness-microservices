package com.fitness.activityservice.services;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.fitness.activityservice.dto.ActivityRequest;
import com.fitness.activityservice.dto.ActivityResponse;
import com.fitness.activityservice.model.Activity;
import com.fitness.activityservice.repositories.ActivityRepository;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class ActivityService {

	private ActivityRepository activityRepository;

	public ActivityResponse trackActivity(ActivityRequest request) {
		Activity activity = Activity.builder()
				.additionalMetrices(request.getAdditionalMetrices())
				.calariesBurned(request.getCalariesBurned())
				.duration(request.getDuration())
				.startTime(request.getStartTime())
				.type(request.getType())
				.userId(request.getUserId())
				.build();
		Activity savedActivity = activityRepository.save(activity);
		return mapToResponse(savedActivity);
	}

	private ActivityResponse mapToResponse(Activity savedActivity) {
		ActivityResponse activityResponse = new ActivityResponse();
		activityResponse.setAdditionalMetrices(savedActivity.getAdditionalMetrices());
		activityResponse.setCalariesBurned(savedActivity.getCalariesBurned());
		activityResponse.setDuration(savedActivity.getDuration());
		activityResponse.setId(savedActivity.getId());
		activityResponse.setStartedAt(savedActivity.getStartedAt());
		activityResponse.setStartTime(savedActivity.getStartTime());
		activityResponse.setType(savedActivity.getType());
		activityResponse.setUpdatedAt(savedActivity.getUpdatedAt());
		activityResponse.setUserId(savedActivity.getUserId());
		return activityResponse;
	}

	public List<ActivityResponse> getUserActivities(String userId) {
		List<Activity> activities = activityRepository.findByUserId(userId);
		return activities.stream()
				.map(this::mapToResponse)
				.collect(Collectors.toList());
	}

	public ActivityResponse getActivityById(String activityId) {
		return activityRepository.findById(activityId)
				.map(this::mapToResponse)
				.orElseThrow(()->new RuntimeExcep)
	}
}
